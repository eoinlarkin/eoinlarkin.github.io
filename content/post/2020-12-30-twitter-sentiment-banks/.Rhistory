geom_line()
plot2 <-  ggplot(as.data.frame(x.samps), aes(x=x.samps)) +
geom_histogram(aes(y =..density..), binwidth=0.01, colour="black", fill="skyblue", alpha=0.25)+
geom_area(stat='function', fun=dbeta, args=list(shape1=2.5,shape2=4.5), color='darkred', fill='darkred', alpha=0.33) +
##scale_colour_manual("Legend", values = c("black", "darkred")) +
labs(title="Plot of Simulated N(0,1) (Blue) and Theoretical N(0, 1) (Red)",
x = "X Values")
grid.arrange(plot1, plot2, ncol=2)
View(x.samps)
x.samps <- metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$output
metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$acceptance.rate
x.samps <- tibble(iter = 1:length(x.samps),
x.samps = x.samps)
#par(mfrow=c(1,2))
#plot(x.samps, xlab="x", ylab="f(x)", main=("Trace plot of x[t]"),col="red", type="l")
plot1 <-  ggplot(x.samps, aes(x=iter, y=x.samps)) +
geom_line()
plot2 <-  ggplot(as.data.frame(x.samps), aes(x=x.samps)) +
geom_histogram(aes(y =..density..), binwidth=0.01, colour="black", fill="skyblue", alpha=0.25)+
geom_area(stat='function', fun=dbeta, args=list(shape1=2.5,shape2=4.5), color='darkred', fill='darkred', alpha=0.33) +
##scale_colour_manual("Legend", values = c("black", "darkred")) +
labs(title="Plot of Simulated N(0,1) (Blue) and Theoretical N(0, 1) (Red)",
x = "X Values")
grid.arrange(plot1, plot2, ncol=2)
x.samps <- metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$output
metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$acceptance.rate
x.samps <- tibble(iter = 1:length(x.samps),
x.samps = x.samps)
#par(mfrow=c(1,2))
#plot(x.samps, xlab="x", ylab="f(x)", main=("Trace plot of x[t]"),col="red", type="l")
plot1 <-  ggplot(x.samps, aes(x=iter, y=x.samps)) +
geom_line()
plot2 <-  ggplot(as.data.frame(x.samps), aes(x=x.samps)) +
geom_histogram(aes(y =..density..), binwidth=0.05, colour="black", fill="skyblue", alpha=0.25)+
geom_area(stat='function', fun=dbeta, args=list(shape1=2.5,shape2=4.5), color='darkred', fill='darkred', alpha=0.33) +
##scale_colour_manual("Legend", values = c("black", "darkred")) +
labs(title="Plot of Simulated N(0,1) (Blue) and Theoretical N(0, 1) (Red)",
x = "X Values")
grid.arrange(plot1, plot2, ncol=2)
View(x.samps)
x.samps <- metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$output
metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$acceptance.rate
x.samps <- tibble(iter = 1:length(x.samps),
x.samps = x.samps)
#par(mfrow=c(1,2))
#plot(x.samps, xlab="x", ylab="f(x)", main=("Trace plot of x[t]"),col="red", type="l")
plot1 <-  ggplot(x.samps, aes(x=iter, y=x.samps)) +
geom_line(color="red")
plot2 <-  ggplot(as.data.frame(x.samps), aes(x=x.samps)) +
geom_histogram(aes(y =..density..), binwidth=0.05, colour="black", fill="skyblue", alpha=0.25)+
geom_area(stat='function', fun=dbeta, args=list(shape1=2.5,shape2=4.5), color='darkred', fill='darkred', alpha=0.33) +
##scale_colour_manual("Legend", values = c("black", "darkred")) +
labs(title="Plot of Simulated N(0,1) (Blue) and Theoretical N(0, 1) (Red)",
x = "X Values")
grid.arrange(plot1, plot2, ncol=2)
x.samps <- metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$output
metropolis.hastings.beta(0.1, 1e4, 2.5, 4.5)$acceptance.rate
x.samps <- tibble(iter = 1:length(x.samps),
x.samps = x.samps)
#par(mfrow=c(1,2))
#plot(x.samps, xlab="x", ylab="f(x)", main=("Trace plot of x[t]"),col="red", type="l")
plot1 <-  ggplot(x.samps, aes(x=iter, y=x.samps)) +
geom_line(color="red")
plot2 <-  ggplot(as.data.frame(x.samps), aes(x=x.samps)) +
geom_histogram(aes(y =..density..), binwidth=0.025, colour="black", fill="skyblue", alpha=0.25)+
geom_area(stat='function', fun=dbeta, args=list(shape1=2.5,shape2=4.5), color='darkred', fill='darkred', alpha=0.33) +
##scale_colour_manual("Legend", values = c("black", "darkred")) +
labs(title="Plot of Simulated N(0,1) (Blue) and Theoretical N(0, 1) (Red)",
x = "X Values")
grid.arrange(plot1, plot2, ncol=2)
install.packages(c("backports", "broom", "cli", "colorspace", "gh", "htmlwidgets", "isoband", "jsonlite", "lubridate", "magrittr", "nimble", "pillar", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "rprojroot", "testthat", "tinytex", "usethis", "vctrs"))
install.packages(c("backports", "broom", "cli", "colorspace", "gh", "htmlwidgets", "isoband", "jsonlite", "lubridate", "magrittr", "nimble", "pillar", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "rprojroot", "testthat", "tinytex", "usethis", "vctrs"))
install.packages(c("backports", "broom", "cli", "colorspace", "gh", "htmlwidgets", "isoband", "jsonlite", "lubridate", "magrittr", "nimble", "pillar", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "rprojroot", "testthat", "tinytex", "usethis", "vctrs"))
install.packages(c("backports", "broom", "cli", "colorspace", "gh", "htmlwidgets", "isoband", "jsonlite", "lubridate", "magrittr", "nimble", "pillar", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "rprojroot", "testthat", "tinytex", "usethis", "vctrs"))
install.packages(c("backports", "broom", "cli", "colorspace", "gh", "htmlwidgets", "isoband", "jsonlite", "lubridate", "magrittr", "nimble", "pillar", "pkgbuild", "processx", "ps", "rlang", "rmarkdown", "rprojroot", "testthat", "tinytex", "usethis", "vctrs"))
out <- (rcauchy(10)>3)
out
out <- (rcauchy(10)>1)
out
mean(out)
install.packages('rvest')
library(rvest)
install.packages('demography')
library(demography) # forecasting Mortality, fertility, migration and population Data
install.packages('demography')
library(demography) # forecasting Mortality, fertility, migration and population Data
# Following code will import data from teh HMD and creates a demogdata object from the HMD data structure
italyDemo <- hmd.mx(country="ITA",
username="eoin.larkin@gmail.com",
password="mortality2020",
label="Italy")
View(italyDemo)
load(file="mortalityDatasets.RData")
# Plotting our output
park(mfrow=c(1,3))
# Plotting our output
par(mfrow=c(1,3))
# Plotting our output
par(mfrow=c(1,3))
plot(ItalyDemo, series='male', datatype='rate', main='Male Rates')
plot(italyDemo, series='male', datatype='rate', main='Male Rates')
plot(italyDemo, series='female', datatype='rate', main='Female Rates')
plot(italyDemo, series='total', datatype='rate', main='Total Rates')
# Plot of rates by time for all ages
par(mfrow=c(1,3))
plot(italyDemo, series='male', datatype='rate', plot.type='time', main='Male Rates', xlab='Years')
plot(italyDemo, series='female', datatype='rate', plot.type='time', main='Female Rates', xlab = 'Years')
plot(italyDemo, series='total', datatype='rate',  plot.type='time', main='Total Rates', xlab = 'Years')
par(mfrow=c(1,1))
# Fitting the Lee Carter Model
italyLcaM <- lca(italyDemo, series='male', max.age=110)
# Fitting the Lee Carter Model
italyLcaM <- lca(italyDemo, series='male', max.age=100)
# Fitting the Lee Carter Model
italyLcaM <- lca(italyDemo, series='male', max.age=110)
# Fitting the Lee Carter Model
italyLcaM <- lca(italyDemo, series='male', max.age=100)
italyLcaF <- lca(italyDemo, series='female', max.age=100)
# Fitting the Lee Carter Model
italyLcaM <- lca(italyDemo, series='male', max.age=100)
italyLcaF <- lca(italyDemo, series='female', max.age=100)
italyLcaT <- lca(italyDemo, series='total', max.age=100)
par(mfrow=c(1,3))
plot(italyLcaT$ax, main="ax", xlab="Age",ylab="ax",type="l")
lines(x=italyLcaF$age, y=italyLcaF$ax, main="ax", col="red")
lines(x=italyLcaM$age, y=italyLcaM$ax, main="ax", col="blue")
legend("topleft" , c("Male","Female","Total"),
+ cex=0.8,col=c("blue","red","black"),lty=1);
legend("topleft" ,
c("Male","Female","Total"),
cex=0.8,
col=c("blue","red","black"),
lty=1)
plot(italyLcaT$bx, main="bx", xlab="Age",ylab="bx",type="l")
lines(x=italyLcaF$age, y=italyLcaF$bx, main="bx", col="red")
lines(x=italyLcaM$age, y=italyLcaM$bx, main="bx", col="blue")
legend("topright" ,
c("Male","Female","Total"),
cex=0.8,
col=c("blue","red","black"),
lty=1)
plot(italyLcaT$kt, main="kt", xlab="Year",ylab="kt",type="l")
lines(x=italyLcaF$year, y=italyLcaF$kt, main="kt", col="red")
lines(x=italyLcaM$year, y=italyLcaM$kt, main="kt", col="blue")
legend("topright" ,
c("Male","Female","Total"),
cex=0.8,
col=c("blue","red","black"),
lty=1);
library(forecast)
fM<-forecast(italyLcaM,h=110)
fF<-forecast(italyLcaF,h=110)
fT<-forecast(italyLcaT,h=110)
par(mfrow=c(1,3))
plot(fM$kt.f,main="Male")
plot(fF$kt.f,main="Female",)
plot(fT$kt.f,main="Total")
par(mfrow=c(1,1))
ratesM<-cbind(italyDemo$rate$male[1:100,],fM$rate$male[1:100,])
ratesF<-cbind(italyDemo$rate$female[1:100,],fF$rate$female[1:100,])
ratesT<-cbind(italyDemo$rate$total[1:100,],fT$rate$total[1:100,])
par(mfrow=c(1,1))
plot(seq(min(italyDemo$year),max(italyDemo$year)+110),ratesF[65,],
col="red",xlab="Years",ylab="Death Rates",type="l")
lines(seq(min(italyDemo$year),max(italyDemo$year)+110),ratesM[65,],
col="blue",xlab="Years",ylab="Death Rates")
lines(seq(min(italyDemo$year),max(italyDemo$year)+110),ratesT[65,],
col="black",xlab="Years",ylab="Death Rates")
legend("topright" ,
c("Male","Female","Total"),
cex=0.8,
col=c("blue","red","black"),
lty=1);
library(tidyverse)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY") %>%
html_nodes(“.temp”) %>%
html_text()
library(rvest)
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY") %>%
html_nodes(“.temp”) %>%
html_text()
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY") %>%
html_nodes(“.temp”) %>%
html_text()
forecasts <- read_html("https://forecast.weather.gov/MapClick.php?lat=37.7771&lon=-122.4196#.Xl0j6BNKhTY") %>%
html_nodes('.temp') %>%
html_text()
forecasts
url <- read_html("view-source:https://rip.ie/share.php?dn=442402") %>%
html_nodes('og:url') %>%
html_text()
url <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('og:url') %>%
html_text()
url <- read_html("https://rip.ie/share.php?dn=442402")
url <- html("https://rip.ie/share.php?dn=442402")
url
url[2]
View(url)
url2 <- html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('og:url')
url2 <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('og:url')
url3 <- read_xml("https://rip.ie/share.php?dn=442402")
url3
url2 <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('meta') %>%
html_text()
url2
url2 <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('meta')
url2
url2[4]
html_text(url2[4])
html_tag(url2[4])
html_name(url2[4])
html_attr(url2[4])
html_attr(url2[4], 'meta')
html_attrs(url2[4])
html_attr(url2[4], 'content')
url2 <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('meta') %>%
html_attr('content')
url2
url2 <- read_html("https://rip.ie/share.php?dn=442402") %>%
html_nodes('meta') %>%
html_attrs()
url2
url2[4]
library(blogdown)
blogdown::install_hugo()
library(blogdown)
setwd("C:/Users/Eoin/OneDrive/Data Science/Github")
new_site(dir = 'eoinlarkin.github.io',
theme = 'yihui/hugo-xmin',
format = 'toml')
blogdown:::new_post_addin()
setwd("C:/Users/Eoin/OneDrive/Data Science/Github/eoinlarkin.github.io")
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site()
file.create('.nojekyll')
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
setwd("C:/Users/Eoin/OneDrive/Data Science/Github")
new_site(dir = 'eoinlarkin.github.io',
theme = 'olOwOlo/hugo-theme-even',
format = 'toml')
new_site(dir = 'eoinlarkin.github.io',
theme = 'olOwOlo/hugo-theme-even',
format = 'toml')
setwd("C:/Users/Eoin/OneDrive/Data Science/Github/eoinlarkin.github.io")
file.create('.nojekyll')
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
new_site(dir = 'eoinlarkin.github.io',
format = 'toml')
setwd("C:/Users/Eoin/OneDrive/Data Science/Github/eoinlarkin.github.io")
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::bundle_site()
blogdown::build_site()
blogdown::hugo_build()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::build_site()
blogdown:::preview_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::stop_server()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::preview_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::preview_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::build_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::hugo_build()
blogdown::build_site()
blogdown::serve_site()
rm(list=ls())
setwd("C:/Users/Eoin/OneDrive/Data Science/Github/eoinlarkin.github.io")
blogdown:::new_post_addin()
account <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
acc <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
acc <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
kable(df, caption='Summary of Twitter Accounts')
library(knitr)
acc <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
kable(df, caption='Summary of Twitter Accounts')
acc <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
kable(df, caption='Summary of Twitter Accounts')
acc <- c('@bankofireland','@talktoboi','@aibireland', '@askaib')
acc.type <-c('Primary','Customer Support','Primary', 'Customer Support')
acc.foll <- c('39.3k','41.3k','30.9k', '43k')
acc.desc <- c('Official AIB Twitter profile. Primarily used to promote the Bank of Ireland                  brand on Twitter', 'Bank of Ireland’s Twitter customer support channel. Used to manage queries directed to Bank of Ireland customer support queries', 'Official AIB Twitter profile. Primarily used to promote the AIB brand on Twitter', 'Official AIB Support channel. Customer queries are directed to this twitter account and resolved by AIB’s dedicated Twitter customer care team')
df <- data.frame(acc, acc.type, acc.foll, acc.desc)
kable(df, caption='Summary of Twitter Accounts')
knitr::opts_chunk$set(echo = TRUE)
blogdown:::preview_site()
blogdown::build_site()
blogdown:::preview_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
rm(list=ls())     #clearing the R environment
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
library(httpuv)       # required for authentication
library(rtweet)       # loading rtweet library
install.packages('rtweet')
rm(list=ls())     #clearing the R environment
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
library(httpuv)       # required for authentication
library(rtweet)       # loading rtweet library
library(ggplot2)      # plotting
library(dplyr)        # pipes
library(tidytext)     # text mining library
install.packages('tidytext')
rm(list=ls())     #clearing the R environment
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
library(httpuv)       # required for authentication
library(rtweet)       # loading rtweet library
library(ggplot2)      # plotting
library(dplyr)        # pipes
library(tidytext)     # text mining library
library(lubridate)
# -------------------------------
# Setting up twitter
# -------------------------------
appname <- "api_test_explore"      # name of twitter app
key <- "re6VqRcF0SmXDlxPR4I1xeWwg"     # twitter api key
secret <- "WddFVgjpGGUvErcRJGcbaAkRi1D0a7J5VhG5I2uIftO9FcG6lM"   # api secret key
access_tok <- "1125852423287922689-nQN6HOeTpgkFZHzFDc3qVF8kxEJqiw"
access_sec <- "tk1IjdZGaC1VIGhdCmMyZoEPGgi6QnfcEd40GYReG9nrX"
# create token named "twitter_token"
token <- create_token(
app = appname,
consumer_key = key,
consumer_secret = secret)
get_token() # Testing token
rm(list=ls())     #clearing the R environment
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
library(httpuv)       # required for authentication
library(rtweet)       # loading rtweet library
library(ggplot2)      # plotting
library(dplyr)        # pipes
library(tidytext)     # text mining library
library(lubridate)
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
rm(list=ls())     #clearing the R environment
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
library(httpuv)       # required for authentication
library(rtweet)       # loading rtweet library
library(ggplot2)      # plotting
library(dplyr)        # pipes
library(tidytext)     # text mining library
library(lubridate)
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
?read_twitter_csv
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
read_twitter_csv('_raw_boi_main_timeline.csv')
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
read_twitter_csv('_raw_boi_main_timeline.csv')
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
aib_timeline <- read_twitter_csv('_raw_aib_main_timeline.csv')
tweets_aib <- tweets_to_aib_support
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
aib_timeline <- read_twitter_csv('_raw_aib_main_timeline.csv')
tweets_aib <- read_twitter_csv('_raw_tweets_to_aib_support.csv')
tweets_boi <- read_twitter_csv('_raw_tweets_to_boi_support.csv')
tweets_30day_aib <- tweets_to_aib %>%
filter(screen_name != 'AskAIB')
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
aib_timeline <- read_twitter_csv('_raw_aib_main_timeline.csv')
tweets_aib <- read_twitter_csv('_raw_tweets_to_aib_support.csv')
tweets_boi <- read_twitter_csv('_raw_tweets_to_boi_support.csv')
tweets_30day_aib <- read_twitter_csv('_raw_tweets_to_aib_main.csv') %>%
filter(screen_name != 'AskAIB')
setwd("C:/Users/Eoin/OneDrive/Data Science/Projects/Tweet Analysis")
boi_timeline <- read_twitter_csv('_raw_boi_main_timeline.csv')
aib_timeline <- read_twitter_csv('_raw_aib_main_timeline.csv')
tweets_aib <- read_twitter_csv('_raw_tweets_to_aib_support.csv')
tweets_boi <- read_twitter_csv('_raw_tweets_to_boi_support.csv')
tweets_30day_aib <- read_twitter_csv('_raw_tweets_to_aib.csv') %>%
filter(screen_name != 'AskAIB')
tweets_30day_boi <- read_twitter_csv('_raw_tweets_to_boi_main.csv') %>%
filter(screen_name != 'talktoBOI')
filter_date <- '2019-07-08'
# Cleaining up the text in the tweets
boi_timeline$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", boi_timeline$text))
aib_timeline$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", aib_timeline$text))
tweets_aib$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", tweets_aib$text))
tweets_boi$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", tweets_boi$text))
tweets_30day_aib$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", tweets_30day_aib$text))
tweets_30day_boi$text_clean = plain_tweets(gsub("\\s?(f|ht)(tp)(s?)(://)([^\\.]*)[\\.|/](\\S*)", "", tweets_30day_boi$text))
# ***************************************************
# Plotting AIB / BOI Output over a four month window
# ***************************************************
# Converting the date into weekly blocks
boi_timeline$date_week <- data.frame(as.Date(floor_date(boi_timeline$created_at, unit = "week")))
unique(boi_timeline$created_at)
boi_timeline$date_week <- data.frame(as.Date(floor_date(boi_timeline$created_at, unit = "week")))
floor_date(boi_timeline$created_at, unit = "week"))
floor_date(boi_timeline$created_at, unit = "week")
floor_date(boi_timeline$created_at, unit = 'week')
floor_date(boi_timeline$created_at, unit = 'week')
boi_timeline$created_at
setwd("C:/Users/Eoin/OneDrive/Data Science/Github/eoinlarkin.github.io/content/post/2020-12-30-twitter-sentiment-banks")
blogdown::build_site()
